package com.clicker.client;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.GestureDetector;
import android.view.HapticFeedbackConstants;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

public class ClickPadActivity extends Activity{

	public static final String TAG = "SOCKET";
	
	public static final int VIBRATE_MSG = 1000;
	
	public static final int LEFT_DOWN_MSG = 100;
	public static final int RIGHT_DOWN_MSG = 150;

	public static final int LEFT_UP_MSG = 200;
	public static final int RIGHT_UP_MSG = 250;

	public static final int LEFT_CLICK_MSG = 300;
	public static final int RIGHT_CLICK_MSG = 350;
	
	private final byte MOUSE_MOVEMENT_EVENT = 0;
	private final byte MOUSE_BUTTON_EVENT = 1;
	private final byte KEYBOARD_EVENT = 2;
	
	private final byte LEFT_MOUSE_CLICK = 0;
	private final byte RIGHT_MOUSE_CLICK = 1;
	private final byte LEFT_MOUSE_DOWN = 2;
	private final byte LEFT_MOUSE_UP = 3;
	private final byte RIGHT_MOUSE_DOWN = 4;
	private final byte RIGHT_MOUSE_UP = 5;
	
	private final byte UNUSED = 0;
	
	private final float SENSITIVITY = 1.6f;
	
	private EditText etAdvancedText;
	private String changed;
	
	private float xCoord;
	private float yCoord;
	private DatagramSocket ds;
	private byte[] b;
	private DatagramPacket dp;
	private ClickerClient c;
	private Handler messageHandler;
	private boolean leftDown;
	private boolean rightDown;
	private GestureDetector mGestureDetector;
	//private LinearLayout back;
	private RelativeLayout back;
	private InetAddress ip;
	private int port;
	//TODO restore clickpad to working order, last working copy: revision 84
	private ClickerClientApp app;
	private ClickerClient clickerClient;
	private String values;
	
	public ClickPadActivity() {
		//super((ClickerClient) context, 0, ",");

		//Log.d(TAG, "clickpad started");
		leftDown = false;
		rightDown = false;
		messageHandler = new Handler(){
			public void handleMessage(android.os.Message msg) {
				switch (msg.what) {
				case VIBRATE_MSG:
					//Log.d(TAG,"vibrate");
					feedback();
					break;
				case LEFT_DOWN_MSG:
					//Log.d(TAG,"left down");
					leftButtonDown();
					break;
				case RIGHT_DOWN_MSG:
					//Log.d(TAG,"right down");
					rightButtonDown();
					break;
				case LEFT_UP_MSG:
					//Log.d(TAG,"left up");
					leftButtonUp();
					break;
				case RIGHT_UP_MSG:
					//Log.d(TAG,"right up");
					rightButtonUp();
					break;
				case LEFT_CLICK_MSG:
					//Log.d(TAG,"left click");
					leftClick();
					break;
				case RIGHT_CLICK_MSG:
					//Log.d(TAG,"right click");
					rightClick();
					break;
				}
			}
		};
		mGestureDetector = new GestureDetector( new ClickGestureListener(messageHandler));
		
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		app = (ClickerClientApp)getApplication();
		clickerClient =app.getClickerClient(); 
		
		Button keyboard = (Button)findViewById(R.id.keyboard_click_button);
		
		//keyboard.setOnTouchListener(this);
		
		//back = (LinearLayout)findViewById(R.id.click_pad_linear_layout);		
		values= ""; //TODO get values
		
		Button.OnClickListener keyboardClickListener = new Button.OnClickListener() {
			public void onClick(View v){
				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
				//imm.showSoftInput(v, InputMethodManager.SHOW_IMPLICIT);
				//imm.toggleSoftInput(0, 0);
				imm.toggleSoftInputFromWindow(v.getWindowToken(),InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);
			}
		};
		keyboard.setOnClickListener(keyboardClickListener);
		
		initAdvancedText();
		
		try {

			ds = new DatagramSocket();
			ds.connect(ip, port);
		} catch (IOException e) {
			Log.d(TAG, "error creating datagram socket");
			e.printStackTrace();
		}
	}

	protected void processValues(){
		String[] val = values.split(",");
		try {
			ip = InetAddress.getByName(val[0]);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
		port = Integer.parseInt(val[1]);
	}
	
	protected void setFlags(){
		
	}
	
	protected void switchFlags(int flags){
		
	}

	public void removeView(int i){
		
	}
	

	public void resendLast(){
		
	}
		

	protected void setView(){
		this.setContentView(R.layout.click_pad_layout);
		back = (RelativeLayout)findViewById(R.id.click_pad_relative_layout);
	}
	
	private void closeActivity(){
		//TODO: fill in gaps from removing extension of MC Activity
	}
	
	protected void setHandler(){
		Handler activityHandler;//TODO FIX
		activityHandler = new Handler() {
			public void handleMessage(android.os.Message msg) {
				switch(msg.what){
				case ClickerConstants.CLOSE_DIALOG:
					closeActivity();
					break;
				}
			}
		};
	}
	
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		//Log.d(TAG,"on touch!");
		if(mGestureDetector.onTouchEvent(event)){
			return true;
		}
		
		float x = event.getX();
		float y = event.getY();

		switch (event.getAction() & MotionEvent.ACTION_MASK) {
		case MotionEvent.ACTION_DOWN:
			touch_start(x, y);
			break;
		case MotionEvent.ACTION_MOVE:
			touch_move(x, y);
			break;
		case MotionEvent.ACTION_UP:
			touch_up();
			break;
		case MotionEvent.ACTION_POINTER_DOWN:
			rightClick();
			break;
		case MotionEvent.ACTION_POINTER_UP:
			rightButtonUp();
			break;
		}
		return true;
	}	
	
	protected void createViews() {
		// do nothing
	}

	private void touch_start(float x, float y) {
		xCoord = x;
		yCoord = y;
	}

	private void touch_move(float x, float y) {
		sendEvent(MOUSE_MOVEMENT_EVENT, (byte)((x - xCoord) * SENSITIVITY), (byte)((y - yCoord) * SENSITIVITY));
		/*b = new byte[] { MOUSE_MOVEMENT_EVENT, (byte) ((x - xCoord) * 1.6),
				(byte) ((y - yCoord) * 1.6) };
		dp = new DatagramPacket(b, 3);
		try {
			ds.send(dp);
		} catch (IOException e) {
			Log.d(TAG, "ds: " + ds + " dp: " + dp);
			e.printStackTrace();
		}*/
		xCoord = x;
		yCoord = y;
	}

	private void touch_up() {
		xCoord = 0.0f;
		yCoord = 0.0f;
		if (leftDown){
			leftButtonUp();
		}
		if (rightDown){
			rightButtonUp();
		}
	}

	@Override
	public void onStop() {
		super.onStop();
		ds.close();
		Log.d(TAG, "onStop!");
	}

	private void feedback(){
		back.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
	}

	private void leftClick(){
		sendEvent(MOUSE_BUTTON_EVENT, UNUSED, LEFT_MOUSE_CLICK);
	}

	private void rightClick(){
		sendEvent(MOUSE_BUTTON_EVENT, UNUSED, RIGHT_MOUSE_CLICK);
	}
	
	private void leftButtonDown(){
		sendEvent(MOUSE_BUTTON_EVENT, UNUSED, LEFT_MOUSE_DOWN);
		leftDown = true;
	}
	
	private void leftButtonUp(){
		sendEvent(MOUSE_BUTTON_EVENT, UNUSED, LEFT_MOUSE_UP);
		leftDown = false;
	}
	
	private void rightButtonDown(){
		//Log.d(TAG,"right button down!");
		sendEvent(MOUSE_BUTTON_EVENT, UNUSED, RIGHT_MOUSE_DOWN);
		rightDown = true;
	}
	
	private void rightButtonUp(){
		sendEvent(MOUSE_BUTTON_EVENT, UNUSED, RIGHT_MOUSE_UP);
		rightDown = false;
	}
	
	
	
	private void initAdvancedText() {
		EditText et = (EditText) this.findViewById(R.id.etAdvancedText);
		this.etAdvancedText = et;
		et.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);//make sure keyboard doesnt go fullscreen in landscape mode

		changed = "a  ";
		etAdvancedText.setText(changed);
		
		// listener
		et.setOnKeyListener(new View.OnKeyListener(){

				@Override
				public boolean onKey(View v, int keyCode, KeyEvent event)
				{
					//Log.d(TAG, "RD '" + event.getCharacters() + "' "
					//		+ keyCode);
					changed = "a  ";
					etAdvancedText.setText(changed);
					return false;
				}

			});
		et.addTextChangedListener(new TextWatcher(){
			public void onTextChanged(CharSequence s, int start, int before,
					int count)
			{
					if (s.toString().equals(changed))
					{
						etAdvancedText.requestFocus();
						etAdvancedText.setSelection(3);
						return;
					}
					changed = null;

					// onAdvancedTextChanged(s, start, count);
					//Log.d(TAG,
					//		"rd '" + s.toString().substring(start, start + count)
					//				+ "' " + start + "|" + count + "count: "+count+" start:"+start+" before: "+before+".");
					String change = s.toString().substring(start, start + count);

					String text = etAdvancedText.getText().toString();
					if (text.length() == 2){
						//Log.d(TAG,"backspace? text="+text+".");
						sendKeys("\b");
					} else {
						//Log.d(TAG,"not backspace:"+text+". Length:"+text.length());
						sendKeys(Character.toString(text.charAt(3)));
					}
					changed = "a  ";
					etAdvancedText.setText(changed);
			}
			
			public void afterTextChanged(Editable s)
			{
				
			}
			public void beforeTextChanged(CharSequence s, int start, int count, int after)
			{
				
			}
		});
	}
	
	/*private void sendKey(int i){
		//Log.d(TAG,"sendKey(int): "+i);
		char ch;
		if(i == 67){
			ch = "\b".charAt(0);
			sendEvent(KEYBOARD_EVENT, UNUSED, (byte)ch);
		}
	}*/
	
	private void sendKeys(String s){
		//Log.d(TAG,"sendKey(string): "+s);
		char c = s.charAt(0);
		sendEvent(KEYBOARD_EVENT, UNUSED, (byte)c);
	}
	
	private void sendEvent(byte deviceCode, byte x, byte y){
		b = new byte[] { deviceCode, x, y};
		dp = new DatagramPacket(b, 3);
		try {
			ds.send(dp);
		} catch (IOException e) {
			Log.d(TAG, "ds: " + ds + " dp: " + dp);
			e.printStackTrace();
		}
	}
	
	
}

